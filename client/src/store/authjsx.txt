import { createContext, useContext, useState, useEffect } from "react";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {

    const [token, setToken] = useState(localStorage.getItem("token")); // to Store token

    // const [user, setUser] = useState("");

    const storeTokenInLS = (serverToken) => {
        return localStorage.setItem("token", serverToken)
    };

    // TO show either Logout or (Login & Register)
    let isLoggedIn = !!token;

    // tackling the logout functionality
    const LogoutUser = () => {
        setToken(""); // Emptying the token
        return localStorage.removeItem("token");
    };


    // JWT AUTHENTICATION -- TO GET THE CURRENT USER DATA ------------------------

    // const userAuthentication = async () => {
    //     try {
    //         const response = await fetch("http://localhost:5000/api/auth/user", {
    //             method: "GET",
    //             headers: { Authorization: `Bearer ${token}` },
    //         });

    //         if (response.ok) {
    //             const data = await response.json();
    //             console.log("User data :", data.userData)
    //             setUser(data.userData);
    //         }
    //     } catch (error) {
    //         console.error("Error in Fetching user data")
    //     }


    //     useEffect(() => {
    //         userAuthentication();
    //     }, []);

    // }

    // add "user" in AuthContext.Provider value={{}}



    // to fetch the services from the database --------------------------------------
    const [services, setServices] = useState([]); //// Initialize services as an empty array
    const [isLoading, setIsLoading] = useState(false); // Loading state for services
    const getServices = async () => {
        setIsLoading(true); // Set loading state to true
        try {
            const response = await fetch("http://localhost:5000/api/data/service", {
                method: "GET"
            });

            if (response.ok) {
                const data = await response.json();
                console.log(data);

                setServices(data);
            } else {
                console.error("services frontend error:", error);
            }
        }
        finally {
            setIsLoading(false); // Set loading state to false after fetch (regardless of success/failure)
        }
    }
    useEffect(() => {
        getServices();
    }, []); // Fetch services on component mount

    return (
        <AuthContext.Provider value={{ storeTokenInLS, LogoutUser, isLoggedIn, services }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    const authContextValue = useContext(AuthContext)
    if (!authContextValue) {
        throw new Error("useAuth used outside of the Provider");
    }
    return authContextValue;
};